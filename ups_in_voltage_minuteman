#!/usr/bin/python
# Checks Minuteman UPS units:

ups_in_voltage_default_levels = (210, 180) # warning / critical

def inventory_upsmm(info):
        inventory = []
        #import pprint ; pprint.pprint(info)
        #print range(len(info))
	lineinc = 1
	linecnt = int(info[0][0])
	#Start inventory after line count OID:
        for i in range(1,len(info),3):
                #print info[i]
		linenum = int(lineinc)
		
		if not ("NULL" in info[i][0]) and not ("NULL" in info[i+1][0]):
			#print "linenume is %d, i is %d , info at i is %s, and i plus 1 is: %s" % (linenum, int(i), str(info[i][0]), str(info[i+1][0]))
	               	inventory.append( (linenum, "ups_in_voltage_default_levels") )

		lineinc+=1
	
        return inventory

def check_upsmm(item, params, info):
        warn, crit = params

	lineinc = 1
	linecnt = int(info[0][0])

	#Start checking after line count OID:
	for i in range(1,len(info),3):
		if lineinc == item and info[i] is not None:
                       	linenum = int(lineinc)
                       	freq = int(info[i][0])/10
                       	power = int(info[i+1][0])/10

	        	infotext = "Input Line: %d, input voltage: %dV, input freq: %dHz (warn/crit at %dV/%dV)" % (linenum, power, freq, warn, crit)

			if power <= crit:
				return (2, infotext)
			if power <= warn:
				return (1, infotext)
			else:
				return (0, infotext)

		lineinc+=1

        return (3, "Power from line %s not found in SNMP output" % linenum)


check_info["ups_in_voltage_minuteman"] = {
    'check_function'		: check_upsmm,
    'inventory_function'	: inventory_upsmm,
    'service_description'	: 'UPS Minuteman Input Voltage for line %s',
    'group'			: "evolt",
    'snmp_info'			: ( ".1.3.6.1.4.1.2254.2.4", [ "4" ] ),
    'snmp_scan_function'	: lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.2254.2.4"),
}

snmp_info["ups_in_voltage_minuteman"] = ( ".1.3.6.1.4.1.2254.2.4", [ "4" ] )

