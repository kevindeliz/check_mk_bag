#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

def string2int(str):
    try:
        res = int(str)
    except ValueError:
        res = 0
    return res

def sensorstate2str(sensor):
    sensor_state = {
        1  : 'Presence detected',
        2  : 'Failure detected',
        4  : 'Predictive Failure',
        8  : 'AC lost',
        16 : 'AC lost or out-of-range',
        32 : 'AC out-of-range but present',
        64 : 'Configuration error',
        }
    res = []
    for bit, text in sensor_state.iteritems():
        if sensor & bit:
            res.append(text)
    return ", ".join(res)

def inventory_dell_omsa_powersupply(info):
    inventory = []
    for line in info:
        inventory.append(( line[0], None ))
    return inventory

def check_dell_omsa_powersupply(item, params, info):
    powersupply_state = {
        1 : 'Other',
        2 : 'Unknown',
        3 : 'OK',
        4 : 'NonCritical',
        5 : 'Critical',
        6 : 'NonRecoverable',
        }
    powersupply_type = {
        1  : 'Other',
        2  : 'Unknown',
        3  : 'Linear',
        4  : 'Switching',
        5  : 'Battery',
        6  : 'Uninterruptible Power Supply',
        7  : 'Converter',
        8  : 'Regulator',
        9  : 'AC',
        10 : 'DC',
        11 : 'VRM',
        }
    for line in info:
        if line[0] != item:
            continue
        state = int(line[2])
        sensorstate = sensorstate2str(int(line[4]))
        outputwatts = int(line[5]) / 10.0
        try:
            info_text = "%s (%s): %0.1fW, State %s, %s" % (line[1],
                                                           powersupply_type[int(line[3])],
                                                           outputwatts,
                                                           powersupply_state[state],
                                                           sensorstate
                                                           )
        except KeyError:
            info_text = "%s (%s): %0.1fW, %d, %s" % (line[1], line[3], outputwatts, state, sensorstate)
        if state in [3]:
            return (0, info_text)
        if state in [4]:
            return (1, info_text)
        if state in [5, 6]:
            return (2, info_text)
        return (3, info_text, perfdata)
    return (3, "Powersupply %s not found" % item)

check_info["dell_omsa_powersupply"] = {
    'check_function'        : check_dell_omsa_powersupply,
    'inventory_function'    : inventory_dell_omsa_powersupply,
    'service_description'   : 'OMSA Power Supply %s',
    'has_perfdata'          : False,
    'snmp_info'             : ('.1.3.6.1.4.1.674.10892.1.600.12.1', ['2.1',  # powerSupplyIndex
                                                                     '8.1',  # powerSupplyLocationName
                                                                     '5.1',  # powerSupplyStatus
                                                                     '7.1',  # powerSupplyType
                                                                     '11.1', # powerSupplySensorState
                                                                     '6.1',  # powerSupplyOutputWatts
                                                                     ] ),
    'snmp_scan_function'    : lambda oid: oid(".1.3.6.1.4.1.674.10892.1.600.12.1.2.1.1") != None,
}

